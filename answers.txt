# Fill in your name, student ID, and email address in this file.
# If you are working in a team, fill out the information for both team 
# members.

# SUBMIT THE LAB ONLY ONCE (from only one partner). This file will be
# automatically parsed in order to give both team members credit for the
# lab.

# You need to fill in the EXERCISE sections describing your solutions
# for Tasks 1, 2, and 3, as well as write the corresponding code.
# If you did one or more extra credit problems, indicate which one in the
# appropriate section below (remove the # sign first). If you have any other
# information you'd like us to know, please add it at the end of the file.

# Partner 1
Name: Roland Zeng
Student ID: 204150508
Email: roland.zeng@gmail.com

# Partner 2 (if you're working in a team)
Name: Daniel Ong
Student ID: 804301788
Email: danieldyo@ucla.edu

# EXERCISE 1: What method you used to make your peer download and upload
#    files in parallel?  (~1-3 sentences)
We used forking to parallelize our downloading and uploading. See line 849 & line 866. 

# EXERCISE 2A: What conditions did you find and fix that would have
#    triggered a buffer overrun bug?  (~1-3 sentences each)
We searched for if the file name size was greater than the max size allowed. If it was, we exited. See line 539 for an example.

# EXERCISE 2B: What other robustness problems did you fix?  (~1-3 sentences
#    each)
1) We made sure you can't upload from any different directories (by weeding out requests that contained ~, .., ~/, etc). See line 678.
2) Along with the above, we double-checked that we are still in the current directory. See line 701.
3) We have buffer overrun checks in multiple places. Line 870, 540. 


# EXERCISE 3: Describe the attacks you implemented for "evil mode".  Why
#    are they attacks?  (~3-10 sentences each)
1) Line 530. We have an instance where create a file that is way too large and try to download it. This would have been a buffer overflow attack.
Buffer overflow is an attack because information that "overflows" past the input space could enter areas it's not supposed to.
2) Line 552. We set i to 50, hence blocking the download. This is an example of an attack because it prevents downloads from ever happening. 

# Extra credit problems
#Extra credit problem: none

# Add any other information you'd like us to know below this line.
We implemented the design problem for access control. See our Design Problem report. 